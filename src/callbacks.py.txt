from dash import dcc, html
from dash.dependencies import Input, Output, State
import plotly.graph_objs as go
from data_processing import load_data, prepare_model_inputs

# Fonction d'enregistrement des callbacks
def register_callbacks(app):
    
    @app.callback(
        [Output("prediction-op", "children"),
         Output("prediction-no-op", "children"),
         Output("campaign-history", "children"),
         Output("performance-graph", "figure")],
        [Input("predict-button", "n_clicks")],
        [State("product-id-input", "value")]
    )
    def update_output(n_clicks, product_id):
        if n_clicks > 0 and product_id:
            # Récupération des données et préparation pour le modèle
            data, model, df = prepare_model_inputs(product_id)
            
            # Effectuer les prédictions (hypothétique fonction)
            prediction_op, prediction_no_op = model.predict(data)
            
            # Historique des campagnes
            campaigns = df[(df['product_id'] == product_id) & (df['on_operation'] == 1)][['operation_name', 'startdate_op', 'enddate_op']].drop_duplicates()
            campaign_history = [
                html.Div([
                    html.Strong(row['operation_name']),
                    html.Span(f" ({row['startdate_op']} - {row['enddate_op']})"),
                ], className="campaign-item")
                for _, row in campaigns.iterrows()
            ]

            # Graphique de performance
            performance_data = df[df['product_id'] == product_id]
            fig = go.Figure()

            fig.add_trace(go.Bar(
                x=performance_data['order_date'], 
                y=performance_data['nb_new_customers'],
                name='Nouveaux clients',
                marker_color='blue'
            ))

            fig.add_trace(go.Bar(
                x=performance_data['order_date'], 
                y=performance_data['total_customers'],
                name='Clients totaux',
                marker_color='green'
            ))

            fig.update_layout(
                barmode='group',  
                title='Performance du produit au fil du temps',
                xaxis_title='Date',
                yaxis_title='Nombre de clients',
                xaxis_tickformat='%d<br>%B',
                legend_title_text='Type de clients',
                margin=dict(l=40, r=20, t=40, b=20),
                height=400
            )
            
            return f"{prediction_op:.2f} nouveaux clients", f"{prediction_no_op:.2f} nouveaux clients", campaign_history, fig
        
        return "En attente...", "En attente...", "Aucun historique disponible", {}